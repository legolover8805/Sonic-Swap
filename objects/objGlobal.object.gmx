<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100048</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    var Array;

    Transition            = -1;
    TransitionX           = 0;
    TransitionY           = 0;
    TransitionRoom        = -1;
    TransitionColor       = c_black;
    TransitionSpeed       = 5;
    TransitionAlpha       = 1;
    TransitionXScale      = 1;
    TransitionYScale      = 1;
    TransitionStep        = 0;
    

    Array[0] = vk_up;
    Array[1] = vk_up;
    Array[2] = vk_down;
    Array[3] = vk_down;
    Array[4] = vk_left;
    Array[5] = vk_right;
    Array[6] = vk_left;
    Array[7] = vk_right;
    scrCreateKeySequence(Array, 30, true, true);

    HDRing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
        Transition = max(min(floor(get_integer("What transition would you like(0-ribbon 1-flash 2-fade 3-crt)?", 0)), 3), 0);
        TransitionSprite = sprite_create_from_surface(application_surface, 0, 0, view_wview[0], view_hview[0], false, false, 0, 0);
                                          
        TransitionAlpha = 1;
        if(Transition == consTransitionFade){
            TransitionAlpha = 0;
            TransitionSpeed = 0.05;
        }
        TransitionXScale = 1;
        TransitionYScale = 1;
        TransitionX = view_xview[0]-(view_wview[0]+20);
        TransitionStep = 0;
        TransitionRoom = roomSonicMAX;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(room == roomTitle &amp;&amp; scrHandleKeySequence() == true){
        room_goto(roomLevelSelect);
    }
    global.Frame += 1;
    if(UseGP == true){
        if(gamepad_is_connected(0) &amp;&amp; window_has_focus() == true){
            if((gamepad_axis_value(0, gp_axislh) &lt;= -0.4) || (gamepad_button_check(0, gp_padl)))
                keyboard_key_press(global.InputLeft);
            else
                keyboard_key_release(global.InputLeft);
            
            if(gamepad_axis_value(0, gp_axislh) &gt;= 0.4 || gamepad_button_check(0, gp_padr))
                keyboard_key_press(global.InputRight);
            else
                keyboard_key_release(global.InputRight);            

            if(gamepad_axis_value(0, gp_axislv) &lt;= -0.4 || gamepad_button_check(0, gp_padu))
                keyboard_key_press(global.InputUp);
            else
                keyboard_key_release(global.InputUp);
            
            if(gamepad_axis_value(0, gp_axislv) &gt;= 0.4 || gamepad_button_check(0, gp_padd) )
                keyboard_key_press(global.InputDown);
            else
                keyboard_key_release(global.InputDown);   

         

            if(gamepad_button_check(0, gp_start))
                keyboard_key_press(global.InputStart);
            else
                keyboard_key_release(global.InputStart);
            



            if(gamepad_button_check(0, gp_face1))
                keyboard_key_press(global.InputA);
            else
                keyboard_key_release(global.InputA);

            if(gamepad_button_check(0, gp_face2))
                keyboard_key_press(global.InputB);
            else
                keyboard_key_release(global.InputB);

            if(gamepad_button_check(0, gp_face3))
                keyboard_key_press(global.InputC);
            else
                keyboard_key_release(global.InputC);

            if(gamepad_button_check(0, gp_face4))
                keyboard_key_press(global.InputSuper);
            else
                keyboard_key_release(global.InputSuper);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
 /*   if(window_get_width() != 480*Scale || window_get_height() != 270*Scale){
        window_set_size(480*Scale, 270*Scale);
        //show_message(window_get_height());
        //show_message(surface_get_height(application_surface));
        show_message(view_hport[0]);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    draw_texture_flush();
    view_wport[0] = 320;
    view_hport[0] = 224;
    if(global.DebugMode == true){
        show_debug_overlay(true);
    }
    if(OS == "Android"){
        R1 = Resolution[0]/320;
        R2 = Resolution[1]/224;
        
        I = virtual_key_add(0, Resolution[1]-(64*R2), 40*R1, 48*R2, global.InputLeft)
       // virtual_key_show(I);
        I = virtual_key_add(32*R1, Resolution[1]-(64*R2), 52*R1, 48*R2, global.InputRight)
       // virtual_key_show(I);
        I = virtual_key_add(24*R1, 128*R2, 32*R1, (64*R2), global.InputUp)
        //virtual_key_show(I);
        I = virtual_key_add(24*R1, Resolution[1]-(32*R2),  32*R1, 32*R2, global.InputDown)
        //virtual_key_show(I);
        I = virtual_key_add(0, 0, 128*R1, 64*R2, vk_enter)
        //virtual_key_show(I);
        I = virtual_key_add(Resolution[0]-128*R1, Resolution[1]-64*R2, 64*R1, 64*R2, global.InputA);
        //virtual_key_show(I);
        I = virtual_key_add(Resolution[0]-64*R1, Resolution[1]-64*R2, 64*R1, 64*R2, global.InputB);
        //virtual_key_show(I);
        I = virtual_key_add(Resolution[0]-64*R1, Resolution[1]-128*R2, 64*R1, 64*R2, global.InputC);
        I = virtual_key_add(Resolution[0]-64*R1, Resolution[1]-128*R2, 64*R1, 64*R2, vk_control);

        I = virtual_key_add(Resolution[0]-112*R1, Resolution[1]-112*R2, 48*R1, 48*R2, global.InputSuper);
        //virtual_key_show(I);
    }else if(OS != "Android" &amp;&amp; OS != "iOS"){
        //window_set_size(Resolution[0]*Scale, Resolution[1]*Scale);
        //display_set_gui_size(Resolution[0]*Scale, Resolution[1]*Scale);
    
    
    
        //view_wport[0] = round(window_get_width());
        //view_hport[0] = round(window_get_height());
    
        //global.ViewWidth    = 320;
        //global.ViewHeight   = 224;
    
        surface_resize(application_surface, round(window_get_width()), round(window_get_height()));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Initiate
    
    audio_stop_all(); 
    randomize();
    AA      = 0;    
    VSync   = false;
    /*if(display_aa &gt;= 12 &amp;&amp; show_question("Turn on Anti-Aliasing and Vsync?") == true){
        display_reset(8, true);
        AA      = 8;
        VSync   = true;
    }
    */
    RecordingMode = consRecordIdle;
    RecordingFile[0] = "";
    RecordingFile[1] = "";

    Cutscene         = false;
    //gml_release_mode(true);

    global.Haptic    = true;

    if(os_type == os_win32 || os_type == os_win8native || os_type == os_win8native){
        OS = "Windows";
    }else if(os_type == os_android){
        OS = "Android";
        os_lock_orientation(true);
    }else if(os_type == os_ios){
        OS = "iOS";
    }else if(os_type == os_macosx){
        OS = "OSX";
    }else
        OS = "Unknown";
    if(gamepad_is_supported() == true){
        if(gamepad_is_connected(0) == true){        
            if(show_question("A Controller has been detected. Would you like to use it?") == true)
                UseGP = true;
            else
                UseGP = false
        }else
            UseGP = false
    }else{
        UseGP = false;
    }

    Resolution[0] = 320;
    Resolution[1] = 224;

    ScreenWidth    = display_get_width();
    ScreenHeight   = display_get_height()-128;

    if(OS != "Android" &amp;&amp; OS != "iOS"){
        Scale = floor(min(get_integer("Enter Resolution Scale.", 1), 4));
        if(Scale &lt; 1)
            Scale = 1;
        window_set_size(Resolution[0]*Scale, Resolution[1]*Scale);
        display_set_gui_size(Resolution[0]*Scale, Resolution[1]*Scale);
    
    
    
        view_wport[0] = round(window_get_width());
        view_hport[0] = round(window_get_height());
    
        global.ViewWidth    = 320;
        global.ViewHeight   = 224;
    
        surface_resize(application_surface, round(window_get_width()), round(window_get_height()));
    }else{
        Resolution[0] = display_get_height();
        
        Resolution[1] = display_get_width();
        Scale = 1;

        display_set_gui_size(Resolution[0]*Scale, Resolution[1]*Scale);
    
        global.ViewWidth    = 320;
        global.ViewHeight   = 224;
    }



    global.FontS2HUD        = font_add_sprite(sprFontHUD, ord("0"), false, 0); 
    global.FontS2System     = font_add_sprite(sprFontSystem, ord("0"), false, 0); 
    global.FontS2Lives      = font_add_sprite(sprFontLives, ord("0"), false, 1);
    global.FontTitle        = font_add_sprite(sprFontTitle, ord("A"), true, 0); 
    global.FontCredits      = font_add_sprite_ext(sprFontCredits, '14"ABCDEFGHIJKLMNOPQRSTUVWXYZ', true, 0); 
    
    global.Player[0]        = noone;
    global.Player[1]        = noone;

    global.Continues        = 0;

    // - Initilize System and add palettes ----------
    pal_swap_init_system(6);
    pal_swap_add_palette(sprS2SuperSonicPalette);
    pal_swap_add_palette(sprS2SuperTailsPalette);
    pal_swap_add_palette(sprSuperKnucklesPalette);
    pal_swap_add_palette(sprS2HyperSonicPalette);
    pal_swap_add_palette(sprS2HyperTailsPalette);
    pal_swap_add_palette(sprHyperKnucklesPalette);
    pal_swap_add_palette(sprS2SonicTransformPalette);
    pal_swap_add_palette(sprGHZWaterPalette);
    
    draw_set_alpha_test(false);
    

    i = 0;
    repeat(10){
        global.Switch[i] = false;
        i += 1;
    }
   
    global.ChaosEmeralds = 0;
    
    global.ViewWidth    = room_width;
    global.ViewHeight   = room_height;
    
    global.Character[0] = consCharacterSonic;
    global.Character[1] = consCharacterTails;
    global.CPUPlayer[0] = false;
    global.CPUPlayer[1] = true;
    global.Parallax     = ds_grid_create(30, 10);

    scrParallaxAddBG(sprEHZParallax1, 1, 0, 0.95, 0);
    scrParallaxAddBG(sprEHZParallax2, 8, 0.05, 0.9, 1);

    scrParallaxAddBG(sprGHZBG00, 1, 0, 0.9, 2);
    scrParallaxAddBG(sprGHZBG01, 1, 0, 0.9, 3);
    scrParallaxAddBG(sprGHZBG02, 8, 0.05, 0.9, 4);
    
    global.DebugMode    = false;
    global.WaterRun     = 0;
    
    global.LevelList    = ds_list_create();
    ds_list_add(global.LevelList, roomTestLevel);
    ds_list_add(global.LevelList, roomGreenHill1);
    ds_list_add(global.LevelList, roomEmeraldHill1);
    ds_list_add(global.LevelList, roomTestLevel2);
    ds_list_add(global.LevelList, roomCutscene);
   // ds_list_add(global.LevelList, roomCredits);
    
    global.LevelNames    = ds_map_create();
    ds_map_add(global.LevelNames, roomTestLevel, "GENERIC TEST");
    ds_map_add(global.LevelNames, roomGreenHill1, "GREEN HILL");
    ds_map_add(global.LevelNames, roomTestLevel2, "GENERIC TEST DOS");
    ds_map_add(global.LevelNames, roomEmeraldHill1, "EMERALD HILL");
    ds_map_add(global.LevelNames, roomCutscene, "Cutscene");
    ds_map_add(global.LevelNames, roomWaterWalk, "WATER TEST");
    
    global.LevelActs    = ds_map_create();
    ds_map_add(global.LevelActs, roomTestLevel, 1);
    ds_map_add(global.LevelActs, roomTestLevel2, 2);
    ds_map_add(global.LevelActs, roomEmeraldHill1, 1);
    ds_map_add(global.LevelActs, roomGreenHill1, 1);
    ds_map_add(global.LevelActs, roomCutscene, 1);    
    ds_map_add(global.LevelActs, roomWaterWalk, 1);

    globalvar LvlMusic;
    LvlMusic = ds_map_create();
    ds_map_add(LvlMusic, roomTestLevel, sndEmeraldHill);
    ds_map_add(LvlMusic, roomTestLevel2, sndEmeraldHill);
    ds_map_add(LvlMusic, roomEmeraldHill1, sndEmeraldHill);
    ds_map_add(LvlMusic, roomGreenHill1, sndGreenHillZone);
    ds_map_add(LvlMusic, roomCutscene, sndEmeraldHill);
    ds_map_add(LvlMusic, roomWaterWalk, sndGreenHillZone);

    globalvar LvlAnimals;
    LvlAnimals = ds_map_create();
    ds_map_add(LvlAnimals, roomGreenHill1, 2);
    ds_map_add(LvlAnimals, roomTestLevel, 1);
    ds_map_add(LvlAnimals, roomTestLevel2, 1);
    ds_map_add(LvlAnimals, roomEmeraldHill1, 0);
    ds_map_add(LvlAnimals, roomCutscene, 1);
    ds_map_add(LvlAnimals, roomWaterWalk, 2);


    // Emerald Hill Zone
    global.AnimalList[0, 0] = objAnimalRicky;
    global.AnimalList[0, 1] = objAnimalFlicky;

    // Mystic Cave Zone
    global.AnimalList[1, 0] = objAnimalCucky;
    global.AnimalList[1, 1] = objAnimalRat;

    // Green Hill Zone
    global.AnimalList[2, 0] = objAnimalFlicky;
    global.AnimalList[2, 1] = objAnimalPocky;

    
    global.Level        = 0;
    global.EndGameRoom  = roomCredits;
    

    global.CollisionList = ds_list_create();
   // ds_list_add(global.CollisionList, objGHZTile02);
   // ds_list_add(global.CollisionList, objGHZTile07);    

    global.Checkpoint   = false;
    
    global.Lives        = 3;
    global.Score        = 0;
    
    global.InputUp      = vk_up;
    global.InputDown    = vk_down;
    global.InputLeft    = vk_left;
    global.InputRight   = vk_right;
    
    global.InputA       = ord("A");
    global.InputB       = ord("S");
    global.InputC       = ord("D");
    global.InputSuper   = ord("Q");

    keyboard_set_map(ord("Z"), ord("A"));
    keyboard_set_map(ord("X"), ord("S"));
    keyboard_set_map(ord("C"), ord("D"));

    keyboard_set_map(ord("V"), ord("Q"));
    keyboard_set_map(ord("F"), ord("Q"));
    if(OS == "Android"){
        keyboard_set_map(vk_backspace, vk_escape);
       // keyboard_set_map(ord("D"), vk_control);
    }
    
    global.InputStart   = vk_enter;

    global.Spindash        = true;
    global.RotationMode    = true;
    global.UseTrail        = false;
    global.Frame           = 0;

    global.Save         = -1;
    
    i = 0;
    repeat(360){
        global.Cos[i] = cos(degtorad(i))
        global.Sin[i] = sin(degtorad(i))
        i += 1;
    }

    if(scrParameters() == false &amp;&amp; OS != "Windows"){
       room_goto_next();
    } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(OS == "Android"){
       // draw_set_alpha_test(false);
       // draw_surface_stretched(application_surface, 0, 0, Resolution[0], Resolution[1]);
       // draw_set_alpha_test(true);
        R1 = Resolution[0]/320;
        R2 = Resolution[1]/224;
        draw_sprite_ext(sprTouchDPad, 0, 40*R1, display_get_gui_height()-40*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        if(keyboard_check(global.InputRight))
            draw_sprite_ext(sprTouchDPadPress, 0, 60*R1, display_get_gui_height()-40*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        if(keyboard_check(global.InputLeft))
            draw_sprite_ext(sprTouchDPadPress, 3, 19*R1, display_get_gui_height()-40*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        if(keyboard_check(global.InputUp))
            draw_sprite_ext(sprTouchDPadPress, 2, 40*R1, display_get_gui_height()-60*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        if(keyboard_check(global.InputDown))
            draw_sprite_ext(sprTouchDPadPress, 1, 40*R1, display_get_gui_height()-19*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        
        if(keyboard_check(global.InputA))
            draw_sprite_ext(sprTouchButtonsPress, 0, display_get_gui_width()-108*R1, display_get_gui_height()-36*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        else
            draw_sprite_ext(sprTouchButtons, 0, display_get_gui_width()-108*R1, display_get_gui_height()-36*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        
        if(keyboard_check(global.InputB))
            draw_sprite_ext(sprTouchButtonsPress, 1, display_get_gui_width()-36*R1, display_get_gui_height()-36*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        else   
            draw_sprite_ext(sprTouchButtons, 1, display_get_gui_width()-36*R1, display_get_gui_height()-36*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8); 
        
        if(keyboard_check(global.InputC))
            draw_sprite_ext(sprTouchButtonsPress, 2, display_get_gui_width()-36*R1, display_get_gui_height()-108*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        else
            draw_sprite_ext(sprTouchButtons, 2, display_get_gui_width()-36*R1, display_get_gui_height()-108*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);

        if(keyboard_check(global.InputSuper))
            draw_sprite_ext(sprTouchButtonsPress, 3, display_get_gui_width()-108*R1, display_get_gui_height()-108*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        else
            draw_sprite_ext(sprTouchButtons, 3, display_get_gui_width()-108*R1, display_get_gui_height()-108*R2, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        if(keyboard_check(global.InputStart))
            draw_sprite_ext(sprTouchStartPress, 0, 0, 0, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
        else
            draw_sprite_ext(sprTouchStart, 0, 0, 0, Resolution[0]/320, Resolution[1]/224, 0, c_white, 0.8);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    R1 = Resolution[0]/320;
    R2 = Resolution[1]/224;

    if(Transition == consTransitionRibbon){
        if(TransitionStep == 0 &amp;&amp; TransitionX &gt;= view_xview[0]-10){
            TransitionStep = 1;
            
            room_goto(TransitionRoom);
        }
        TransitionX += TransitionSpeed; 
        var i = 0;
        WView = min(room_width, view_wview[0]);
        HView = min(room_height, view_hview[0]);
        repeat(ceil(WView/32)){
            draw_sprite(sprTransitionPiece1, 0, TransitionX+WView, view_yview[0]+i);
            draw_sprite_ext(sprTransitionPiece1, 0, TransitionX, view_yview[0]+i, -1, 1, 0, c_white, 1);
            i += 32;
        }
        if(TransitionX &gt;= view_xview[0]+WView+20)
            Transition = -1;
        draw_set_color(c_black);
        draw_rectangle(TransitionX, view_yview[0], TransitionX+WView, view_hview[0], false);
    }else if(Transition == consTransitionFade){
        WView = min(room_width, view_wview[0]);
        HView = min(room_height, view_hview[0]);
        draw_set_colour(TransitionColor);
        draw_set_alpha(TransitionAlpha);
        draw_rectangle(view_xview[0], view_yview[0], WView, HView, false);
        if(TransitionStep == 0){
            TransitionAlpha = min(TransitionAlpha+TransitionSpeed, 1);
            if(TransitionAlpha == 1){
                TransitionStep = 1;
                room_goto(TransitionRoom);
            }
        }else if(TransitionStep == 1){
            TransitionAlpha = max(0, TransitionAlpha-TransitionSpeed);
            if(TransitionAlpha == 0)
                Transition = -1;
        }
        draw_set_colour(c_black);
        draw_set_alpha(1);
    }else if(Transition == consTransitionCRT){
        WView = min(room_width, view_wview[0]);
        HView = min(room_height, view_hview[0]);
        draw_set_color(c_black);
        draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+WView, view_yview[0]+HView, 0);
        
        draw_sprite_ext(TransitionSprite, 0, view_xview[0]+((WView-(WView*TransitionXScale))/2), 
        view_yview[0]+((HView-(HView*TransitionYScale))/2), TransitionXScale/R1, TransitionYScale/R2, 0, c_white, 1);
        
        if(TransitionXScale &lt; 1.2 &amp;&amp; TransitionYScale &gt; 0.15){
            TransitionXScale += 0.05;
        }else if(TransitionYScale &lt;= 0.15){
            TransitionXScale = max(0, TransitionXScale-0.08);
        }
        TransitionYScale = max(TransitionYScale-0.08, 0.002);    
        TransitionAlpha = min(TransitionAlpha+0.08, 1);
        
        draw_set_alpha(TransitionAlpha);
        draw_set_color(c_white);
        
        draw_set_blend_mode(bm_add);
        draw_rectangle(view_xview[0]+((WView-(WView*TransitionXScale))/2), 
        view_yview[0]+((HView-(HView*TransitionYScale))/2),
        view_xview[0]+((WView-(WView*TransitionXScale))/2)+(WView*TransitionXScale), 
        view_yview[0]+((HView-(HView*TransitionYScale))/2)+(HView*TransitionYScale),0);
        draw_set_blend_mode(bm_normal);
        
        draw_set_alpha(1);
        draw_set_color(c_black);
        
        if(TransitionXScale == 0){
            sprite_delete(TransitionSprite);
            Transition = consTransitionFade;
            TransitionAlpha = 1;
            TransitionStep = 1;
            TransitionSpeed = 0.025;
            room_goto(TransitionRoom);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(keyboard_check(vk_alt) == false){
        if(window_get_fullscreen() == false)
            window_set_fullscreen(true);
        else{
            window_set_fullscreen(false);
            window_set_size(640*Scale, 480*Scale);
            view_wport[0] = 640*Scale;
            view_hport[0] = 480*Scale;
        }
    }else
        game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    Scale = floor(min(get_integer("Enter Resolution Scale.", 1), 4));
    if(Scale &lt; 1)
        Scale = 1;

    surface_resize(application_surface, Resolution[0]*Scale, Resolution[1]*Scale);

    window_set_size(Resolution[0]*Scale, Resolution[1]*Scale);          

    //window_set
    
    display_set_gui_size(Resolution[0]*Scale, Resolution[1]*Scale);
    

    //view_wview[0] = round(window_get_width());
    //view_hview[0] = round(window_get_width());

    view_wport[0] = Resolution[0]*Scale;
    view_hport[0] = Resolution[1]*Scale;

    

  //  global.ViewWidth    = Resolution[0];
  //  global.ViewHeight   = Resolution[1];
   // appl
   // disp
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    window_set_fullscreen(!window_get_fullscreen());
    display_reset(AA, VSync);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    room_speed = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(global.DebugMode == true){
        show_message("Reseting record flag.");
        if(RecordingMode == consRecordRec){
            with(global.Player[0])
                scrRecordEnd(consRecordRec);
        }
        RecordingMode = consRecordIdle;
        RecordingFile[0] = working_directory+"\Demo0.ini";
        RecordingFile[1] = working_directory+"\Demo1.ini";
        room_restart();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(global.DebugMode == true &amp;&amp; instance_exists(objPlayer)){
        show_message("Playing recorded input.");
        if(RecordingMode == consRecordRec){
            with(global.Player[0])
                scrRecordEnd(consRecordRec);
        }
        RecordingMode = consRecordPlay;
        global.Checkpoint = false;
        RecordingFile[0] = working_directory+"\Demo0.ini";
        RecordingFile[1] = working_directory+"\Demo1.ini";
        ini_open(working_directory+"\Demo0.ini");
        Rm   = ini_read_real("Main", "Rm", -1);
        Chr  = ini_read_real("Main", "Chr", -1);
        ini_close();
        if(Chr != -1)
            global.Character[0] = Chr;
        if(Rm == -1)
            room_restart();
        else
            room_goto(Rm);
    }  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(global.DebugMode == true &amp;&amp; instance_exists(objPlayer)){
        show_message("Recording input.");
        if(RecordingMode == consRecordRec){
            with(global.Player[0])
                scrRecordEnd(consRecordRec);
        }
        RecordingMode = consRecordRec;
        RecordingFile[0] = working_directory+"\Demo0.ini";
        RecordingFile[1] = working_directory+"\Demo1.ini";
        room_restart();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    HDRing = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    room_goto(roomCredits);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    room_speed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
