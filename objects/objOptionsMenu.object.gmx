<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    global.Spindash        = true;
    global.RotationMode    = true;
    global.UseTrail        = false;
    global.UsePeelout      = true;   

    global.SpeedCap        = 0; 


    VSelect = 1; 
    Options = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if((keyboard_check_pressed(vk_down)) &amp;&amp;(VSelect &lt; Options)){
        VSelect++;
        audio_play_sound(sndSwitchBlip, 1, false);
        exit;
    }else if((keyboard_check_pressed(vk_up)) &amp;&amp; (VSelect &gt; 1)){
        VSelect--;
        audio_play_sound(sndSwitchBlip, 1, false);
        exit;
    }
    if(keyboard_check_pressed(vk_right) || keyboard_check_pressed(vk_left)){
        switch(VSelect){
            case 2:
                global.RotationMode = !global.RotationMode;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 3:
                global.UseTrail = !global.UseTrail;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 4:
                global.UsePeelout = !global.UsePeelout;
                audio_play_sound(sndSwitchBlip, 1, false);
                break; 
        }
    }
    if(keyboard_check_pressed(vk_right) &amp;&amp; VSelect == 1){
        switch(global.Spindash){
            case 0:
                global.Spindash = 1;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 1:
                global.Spindash = 2;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 2:
                global.Spindash = 0;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
        }
    }
    if(keyboard_check_pressed(vk_left) &amp;&amp; VSelect == 1){
        switch(global.Spindash){
            case 0:
                global.Spindash = 2;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 1:
                global.Spindash = 0;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 2:
                global.Spindash = 1;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
        }
    }
    if(keyboard_check_pressed(vk_right) &amp;&amp; VSelect == 5){
        switch(global.SpeedCap){
            case 0:
                global.SpeedCap = 1;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 1:
                global.SpeedCap = 2;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 2:
                global.SpeedCap = 0;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
        }
    }
    if(keyboard_check_pressed(vk_left) &amp;&amp; VSelect == 5){
        switch(global.SpeedCap){
            case 0:
                global.SpeedCap = 2;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 1:
                global.SpeedCap = 0;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
            case 2:
                global.SpeedCap = 1;
                audio_play_sound(sndSwitchBlip, 1, false);
                break;
        }
    }

    if(keyboard_check_pressed(vk_enter) &amp;&amp; objGlobal.Transition == -1){
        with(objGlobal)
            script_execute(choose(scrTransitionCRT, scrTransitionRibbon), room_next(room));
       // room_goto_next();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    draw_set_font(global.FontS2System);


// ------------ SPINDASH ----------    
    if(VSelect == 1)
        draw_set_colour(c_yellow);
    else
        draw_set_colour(c_white);
    
    draw_text(10, 32, "SPINDASH");

    draw_set_colour(c_white);

    if(global.Spindash == 0)
        draw_set_colour(c_yellow);

    draw_text(140, 32, "OFF");
    draw_set_colour(c_white);

    if(global.Spindash == 1)
        draw_set_colour(c_yellow);

    draw_text(200, 32, "NORMAL");
    draw_set_colour(c_white);

    
    if(global.Spindash == 2)
        draw_set_colour(c_yellow);

    draw_text(280, 32, "CD");
    draw_set_colour(c_white);
    

// ------------ ROTATION MODE ----------
    if(VSelect == 2)
        draw_set_colour(c_yellow);
    
    draw_text(10, 48, "ROTATION MODE");

    draw_set_colour(c_white);  

    
    if(global.RotationMode == false)
        draw_set_colour(c_yellow);

    draw_text(160, 48, "LEGACY");
    draw_set_colour(c_white);

    if(global.RotationMode == true)
        draw_set_colour(c_yellow);

    draw_text(240, 48, "SMOOTH");
    draw_set_colour(c_white);  

// ------------ TRAIL ----------
   if(VSelect == 3)
        draw_set_colour(c_yellow);
    
    draw_text(10, 64, "USE TRAIL");

    draw_set_colour(c_white);  
    
    if(global.UseTrail == false)
        draw_set_colour(c_yellow);

    draw_text(160, 64, "FALSE");
    draw_set_colour(c_white);

    if(global.UseTrail == true)
        draw_set_colour(c_yellow);

    draw_text(240, 64, "TRUE");
    draw_set_colour(c_white);

// ------------ PEELOUT ----------
   if(VSelect == 4)
        draw_set_colour(c_yellow);
    
    draw_text(10, 80, "PEELOUT");

    draw_set_colour(c_white);  
    
    if(global.UsePeelout == false)
        draw_set_colour(c_yellow);

    draw_text(160, 80, "FALSE");
    draw_set_colour(c_white);

    if(global.UsePeelout == true)
        draw_set_colour(c_yellow);

    draw_text(240, 80, "TRUE");
    draw_set_colour(c_white);

// ------------ SPEED CAP -----------------

    if(VSelect == 5)
        draw_set_colour(c_yellow);
    
    draw_text(10, 96, "SPEED CAP");
    draw_set_colour(c_white);  
    
    if(global.SpeedCap == 0)
        draw_set_colour(c_yellow);

    draw_text(140, 96, "OFF");
    draw_set_colour(c_white);

    if(global.SpeedCap == 1)
        draw_set_colour(c_yellow);

    draw_text(210, 96, "S1");
    draw_set_colour(c_white);

    
    if(global.SpeedCap == 2)
        draw_set_colour(c_yellow);

    draw_text(280, 96, "S2");
    draw_set_colour(c_white);

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
