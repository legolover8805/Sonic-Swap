<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objParentPlatform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    Alarm           = -1;
    Init            = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
   // show_debug_message(global.Player[0].x);
    Timer = 1;
    Height = (ceil(sprite_height/BlockHeight)*BlockHeight);
    BlockHeight2 = BlockHeight-(Height-sprite_height);
    if(image_xscale == -1){
        for(i=BlockWidth;i&lt;=abs(sprite_width);i+=BlockWidth;){
            for(i2=Height-BlockHeight;i2&gt;=0;i2-=BlockHeight;){            
                
                Ins               = instance_create(x-abs(sprite_width)+i, (y-sprite_yoffset)+i2, objBrokenTerrain);
                with(Ins){
                    X = abs(other.sprite_width)-other.i;
                    Y = other.i2;
                    Solid = true;
                   // Temp = surface_create(abs(other.sprite_width), other.sprite_height);
                    W = other.BlockWidth;
                    if(other.i2 == other.Height-other.BlockHeight)             
                        H = other.BlockHeight2;
                    else
                        H = other.BlockHeight;
                    sprite_index    = other.sprite_index;                         
                    image_xscale    = other.image_xscale;
                    
                    
                    Gravity         = 0;
                    Speed           = 0;
                    GravityActive   = false;
                    if(sprite_exists(other.mask_index))
                        Mask = sprite_duplicate(other.mask_index)
                    else
                        Mask = sprite_duplicate(other.sprite_index)
                    sprite_collision_mask(Mask, true, 2, X, X+W, Y, Y+H, 0, 0);
                    mask_index      = Mask;
                }
                i3 = i+BlockWidth;
                   
                Ins.alarm[0]   = Timer;
                Timer         += 2;
            }
        }
    }else if(image_xscale == 1){
        for(i=sprite_width-BlockWidth;i&gt;=0;i-=BlockWidth;){
            for(i2=Height-BlockHeight;i2&gt;=0;i2-=BlockHeight;){            
                    
                Ins               = instance_create(x+i, (y-sprite_yoffset)+i2, objBrokenTerrain);
                with(Ins){
                    X = other.i
                    Y = other.i2;
                    Solid = true;
                   // Temp = surface_create(other.sprite_width, other.sprite_height);
                    W = other.BlockWidth;
                    if(other.i2 == other.Height-other.BlockHeight)              
                        H = other.BlockHeight2;
                    else
                        H = other.BlockHeight;
                    sprite_index    = other.sprite_index;                         
                    image_xscale    = other.image_xscale;
                    Gravity         = 0;
                    Speed           = 0;
                    GravityActive   = false;
                    if(sprite_exists(other.mask_index))
                        Mask = sprite_duplicate(other.mask_index)
                    else
                        Mask = sprite_duplicate(other.sprite_index)
                    sprite_collision_mask(Mask, true, 2, X, Y, X+W, Y+H, 0, 0);
                    mask_index      = Mask;
                }

                i3             = (abs(sprite_width)-i)+BlockWidth;
                   
                Ins.alarm[0]   = Timer;
                Timer         += 2;
            }
        }
    }
    audio_play_sound(sndTerrainCollapse, 1, false);
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    Alarm -= 1;
    if(Alarm == 0)
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
