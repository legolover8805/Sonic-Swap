<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWaterBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    RatioY      = 0.8;
    Height      = 160;
    MaxScaleY   = 3;
    image_speed = 0.2;
    X           = 0;
   // image_speed = 0.2;

    i = 0;
  /*  repeat(image_number){
        Tex[i] = sprite_get_texture(sprite_index, i)
        i++;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


    if(image_index &gt; image_number-1)
        image_index -= image_number-1;
    
    
    var _Scale;
    
    // Update position, relative to the current scroll
   // x = floor(view_xview[view_current]/view_wview[0])*view_wview[0];
    y = floor(view_yview[view_current]*RatioY)+Height;
    
    // Calculate scale and limit it over the MaxScaleY
    _Scale = min(max((objWater.y - y)/sprite_get_height(sprWaterBG), -MaxScaleY), MaxScaleY);
    
    // Render scaled water
    texture_set_interpolation(true);
        
    Parts         = 32;
    PartHeight    = sprite_get_height(sprWaterBG)/Parts;
    i             = 0;
    Speed         = 0.6;
    
    X            += 2;
    W             = view_wview[0]+64    

    repeat(Parts){
        // Update position, relative to the current scroll
        x = view_xview[0] -(((view_xview[0]+X)*(Speed)) mod W);
        draw_sprite_part_ext(sprWaterBG, image_index, 0, PartHeight*i, sprite_get_width(sprWaterBG), PartHeight, x, y+((PartHeight*i)*_Scale), 1, _Scale, c_white, 1);
        draw_sprite_part_ext(sprWaterBG, image_index, 0, PartHeight*i, sprite_get_width(sprWaterBG), PartHeight, x+W, y+((PartHeight*i)*_Scale), 1, _Scale, c_white, 1);
        i       += 1;
        Speed   += 0.08;
    }
    texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
